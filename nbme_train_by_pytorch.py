# -*- coding: utf-8 -*-
"""NBME Train by pytorch

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19k8p-73U-u37NRvShyLyKTfaL-FNOxYf
"""

!nvidia-smi

from google.colab import drive
drive.mount('/content/drive')

!pip install -U wandb transformers sentencepiece imbalanced-learn 1> log

!cp -r ./drive/MyDrive/Study/NBME/data/deberta-v2-3-fast-tokenizer .

with open("./drive/MyDrive/Study/config/wandb.txt", "r") as f:
    for line in f:
        wandb_key = line.replace("\n", "")

!wandb login {wandb_key}

# The following is necessary if you want to use the fast tokenizer for deberta v2 or v3
import shutil
from pathlib import Path

transformers_path = Path("/usr/local/lib/python3.7/dist-packages/transformers")

input_dir = Path("./deberta-v2-3-fast-tokenizer")

convert_file = input_dir / "convert_slow_tokenizer.py"
conversion_path = transformers_path/convert_file.name

if conversion_path.exists():
    conversion_path.unlink()

shutil.copy(convert_file, transformers_path)
deberta_v2_path = transformers_path / "models" / "deberta_v2"

for filename in ['tokenization_deberta_v2.py', 'tokenization_deberta_v2_fast.py', "deberta__init__.py"]:
    if str(filename).startswith("deberta"):
        filepath = deberta_v2_path/str(filename).replace("deberta", "")
    else:
        filepath = deberta_v2_path/filename
    if filepath.exists():
        filepath.unlink()

    shutil.copy(input_dir/filename, filepath)

import os
import gc
import dill
import random
import ast
import itertools

import numpy as np
import pandas as pd

from tqdm.auto import tqdm
from sklearn.preprocessing import  LabelEncoder
from sklearn.metrics import f1_score

from matplotlib import pyplot as plt
from transformers import AutoTokenizer, AutoConfig, AutoModel
from transformers import get_cosine_schedule_with_warmup
from transformers import AdamW

import wandb
import pickle

import torch
import torch.nn as nn
from torch.nn import functional as F
from torch.utils.data import Dataset, DataLoader
from transformers.models.deberta_v2 import DebertaV2TokenizerFast
from sklearn.model_selection import StratifiedKFold

device = torch.device("cuda")
scaler = torch.cuda.amp.GradScaler()

os.environ["TOKENIZERS_PARALLELISM"] = "true"

class GCF:
    EXP_NAME = 'v1_sift'
 
    PREPROCESSING_DIR = "./drive/MyDrive/Study/NBME/data/preprocessed/deberta-v3-large"
    PSEUDO_DIR = './drive/MyDrive/Study/NBME/data/pseudo'
    PSEUDO_DIR_V4 = './drive/MyDrive/Study/NBME/data/pseudo_relabel_mcdropout'
    OUTPUT_DIR = f"./drive/MyDrive/Study/NBME/data/output/{EXP_NAME}"
    
    MODEL_NAME = 'microsoft/deberta-v3-large'
    #MODEL_NAME = 'microsoft/deberta-v2-xlarge'
    TOKENIZER = DebertaV2TokenizerFast.from_pretrained(MODEL_NAME)
    CONFIG = AutoConfig.from_pretrained(MODEL_NAME)
    SEQUENCE_LENGTH = 384
    #SEQUENCE_LENGTH = 340
    SEED = 0
    N_FOLDS = 5
    BS = 4
    
    LR = 2e-5
    WEIGHT_DECAY = 0.01
    ACCUMULATE = 2
    N_EPOCHS = 5
    WARM_UP_RATIO = 0.0
    GRAD_CLIP = 1000.0

    PSEUDO_VERSION = [1]
    
    NOT_WATCH_PARAM = ["TOKENIZER", "CONFIG", "INPUT_PATH", "PREPROCESSING_DIR", 'NOT_WATCH_PARAM']
    
!mkdir -p {GCF.OUTPUT_DIR}

def set_seed(seed=GCF.SEED):
    random.seed(seed)
    os.environ["PYTHONHASHSEED"] = str(seed)
    np.random.seed(seed)
    torch.manual_seed(seed)
    torch.cuda.manual_seed(seed)
    torch.cuda.manual_seed_all(seed)
    torch.backends.cudnn.deterministic = True
    torch.backends.cudnn.benchmark = False

sequences = np.load(open(f"{GCF.PREPROCESSING_DIR}/sequences.npy",'rb'))
masks = np.load(open(f"{GCF.PREPROCESSING_DIR}/masks.npy",'rb'))
type_ids = np.load(open(f"{GCF.PREPROCESSING_DIR}/token_ids.npy",'rb'))
labels = np.load(open(f"{GCF.PREPROCESSING_DIR}/labels.npy",'rb'))

train_df = pd.read_csv(f"{GCF.PREPROCESSING_DIR}/train_preprocessed.csv")
pn_num_folds = train_df['fold']

print(labels.shape)

pseudo_sequences = np.vstack([
                              np.load(open(f"{GCF.PSEUDO_DIR}/sequences_pseudo_v{i}.npy",'rb')) for i in GCF.PSEUDO_VERSION
])
pseudo_masks = np.vstack([
                              np.load(open(f"{GCF.PSEUDO_DIR}/masks_pseudo_v{i}.npy",'rb')) for i in GCF.PSEUDO_VERSION
])
pseudo_type_ids = np.vstack([
                              np.load(open(f"{GCF.PSEUDO_DIR}/token_ids_pseudo_v{i}.npy",'rb')) for i in GCF.PSEUDO_VERSION
])
pseudo_labels = np.vstack([
                              np.load(open(f"{GCF.PSEUDO_DIR}/labels_pseudo_v{i}.npy",'rb')) for i in GCF.PSEUDO_VERSION
])

labels_check_mc_dropout = np.hstack([np.array([np.load(open(f'{GCF.PSEUDO_DIR_V4}/labels_check_mc_dropout_v{v}_f{f}.npy','rb')) for f in range(GCF.N_FOLDS)]) for v in GCF.PSEUDO_VERSION])

print(pseudo_sequences.shape)
print(pseudo_masks.shape)
print(pseudo_type_ids.shape)
print(pseudo_labels.shape)
print(labels_check_mc_dropout.shape)

def pseudo_to_target(pred):
    if pred == 1:
        return 1
    elif pred == 0:
        return 0
    else:
        return -1

def pseudo_to_target_all_fold(preds):
    return np.array([pseudo_to_target(p) for p in preds])

new_labels = []
for idx in tqdm(range(len(pseudo_labels))):
    true_lab = pseudo_labels[idx, :]
    pseudo_lab = labels_check_mc_dropout[:, idx, :]
    new_label = np.vstack([np.ones(GCF.N_FOLDS) * -1 if t == -1 else pseudo_to_target_all_fold(pseudo_lab[:, i]) for i, t in enumerate(true_lab)])
    new_labels.append(new_label)
new_labels = np.stack(new_labels)

print(new_labels.shape)

is_posi = [new_labels[i, :, :][new_labels[i, :, :] > -1].sum() > 0 for i in range(len(new_labels))]

pseudo_sequences = pseudo_sequences[is_posi, :]
pseudo_masks = pseudo_masks[is_posi, :]
pseudo_type_ids = pseudo_type_ids[is_posi, :]
pseudo_labels = new_labels[is_posi, :, :]

print(pseudo_labels.shape)

class NBMEDataset(Dataset):
    def __init__(self, sequences, mask, type_ids, target):
        self.sequences = sequences
        self.mask = mask
        self.type_ids = type_ids
        self.target = target
        
    def __len__(self):
        return len(self.sequences)
    
    def __getitem__(self, item):
        sequences = self.sequences[item, :]
        mask = self.mask[item, :]
        type_ids = self.type_ids[item, :]
        target = self.target[item, :]
        d = {
            "sequences": torch.tensor(sequences).long(),
            "mask": torch.tensor(mask).long(),
            "type_ids": torch.tensor(type_ids).long(),
            "target" : torch.tensor(target).float(),
        }
        return d

class NBMEModel(nn.Module):
    
    def __init__(self):
        super(NBMEModel, self).__init__()
        self.transformer = AutoModel.from_pretrained(
            GCF.MODEL_NAME, 
            output_hidden_states=True
        )
        self.fc_dropout = nn.Dropout(0.2)
        self.classifier = nn.Linear(GCF.CONFIG.hidden_size, 1)
        
        self._init_weights(self.classifier)
    
    def _init_weights(self, module):
        if isinstance(module, nn.Linear):
            module.weight.data.normal_(mean=0.0, std=GCF.CONFIG.initializer_range)
            if module.bias is not None:
                module.bias.data.zero_()
        elif isinstance(module, nn.Embedding):
            module.weight.data.normal_(mean=0.0, std=GCF.CONFIG.initializer_range)
            if module.padding_idx is not None:
                module.weight.data[module.padding_idx].zero_()
        elif isinstance(module, nn.LayerNorm):
            module.bias.data.zero_()
            module.weight.data.fill_(1.0)
            
    def forward(self, input_ids, attention_mask, token_type_ids, target=None, pseudo=None):
        outputs = self.transformer(
            input_ids,
            attention_mask=attention_mask,
            token_type_ids=token_type_ids,
        )
        h = outputs['last_hidden_state']
        h = self.fc_dropout(h)
        h = self.classifier(h)
        h = h.squeeze(-1)
        if target is not None:
            loss = nn.BCEWithLogitsLoss(reduction="none")(h, target)
            if pseudo is not None:
                mask = (target - (torch.ones(attention_mask.shape).to(device) * pseudo.unsqueeze(1))) >= 0
            else:
                mask = target != -1
            loss = torch.masked_select(loss, mask).mean()
        else:
            loss = 0
        loss = loss / GCF.ACCUMULATE
        return loss, h

def train_loop(model, train_dloader, optimizer, scheduler):
    lrs, losses, grads = [], [], []
    model.train()
    global_step = 0
    for idx, d in tqdm(enumerate(train_dloader), total=len(train_dloader)):
        with torch.cuda.amp.autocast(): 
            loss, logits = model(
                d['sequences'].to(device),
                d['mask'].to(device),
                d['type_ids'].to(device),
                d['target'].to(device),
            )

            loss = loss + adv.loss(
                logits,
                logits_fn,
                input_ids=d['sequences'].to(device),
                attention_mask=d['mask'].to(device),
                token_type_ids=d['type_ids'].to(device)
            )

        scaler.scale(loss).backward()
        grad_norm = torch.nn.utils.clip_grad_norm_(model.parameters(), GCF.GRAD_CLIP)
        grad_norm = grad_norm.item()
        if grad_norm == float('inf') or grad_norm == float('-inf') or np.isnan(grad_norm):
            grad_norm = 0

        if global_step % GCF.ACCUMULATE == 0:
            scaler.step(optimizer) 
            scaler.update() 
            optimizer.zero_grad()
            scheduler.step()

        lr = np.array([param_group["lr"] for param_group in optimizer.param_groups]).mean()
        lrs.append(lr.item())
        losses.append(loss.item())
        grads.append(grad_norm)
        global_step += 1
    return losses, lrs, grads


def valid_loop(model, valid_dloader):
    losses, predicts = [], []
    model.eval()
    for idx, d in tqdm(enumerate(valid_dloader), total=len(valid_dloader)):
        with torch.no_grad():
            loss, pred = model(d['sequences'].to(device), d['mask'].to(device), d['type_ids'].to(device), d['target'].to(device))
            losses.append(loss.item())
            predicts.append(pred.cpu().sigmoid())
    predicts = torch.vstack(predicts)
    valid_loss = np.mean(losses)
    
    return valid_loss, predicts

# https://www.kaggle.com/theoviel/evaluation-metric-folds-baseline#Metric
    
def micro_f1(preds, truths):
    """
    Micro f1 on binary arrays.

    Args:
        preds (list of lists of ints): Predictions.
        truths (list of lists of ints): Ground truths.

    Returns:
        float: f1 score.
    """
    # Micro : aggregating over all instances

    preds = np.concatenate(preds)
    truths = np.concatenate(truths)

    return f1_score(truths, preds)

def spans_to_binary(spans, length=None):
    """
    Converts spans to a binary array indicating whether each character is in the span.

    Args:
        spans (list of lists of two ints): Spans.

    Returns:
        np array [length]: Binarized spans.
    """
    length = np.max(spans) if length is None else length
    binary = np.zeros(length)
    for start, end in spans:
        binary[start:end] = 1
    
    return binary

def span_micro_f1(preds, truths):
    """
    Micro f1 on spans.

    Args:
        preds (list of lists of two ints): Prediction spans.
        truths (list of lists of two ints): Ground truth spans.

    Returns:
        float: f1 score.
    """
        
    bin_preds = []
    bin_truths = []
    
    for pred, truth in zip(preds, truths):
        if not len(pred) and not len(truth):
            continue

        length = max(np.max(pred) if len(pred) else 0, np.max(truth) if len(truth) else 0)
        bin_preds.append(spans_to_binary(pred, length))
        bin_truths.append(spans_to_binary(truth, length))
        
    return micro_f1(bin_preds, bin_truths)

def decode_location(locations):
    for x in ["[","]","'"]:
        locations = locations.replace(x,'')
    locations = locations.replace(',',';')
    locations = locations.split(";")
    res = []
    for location in locations:
        if location:
            x,y = location.split()
            res.append([int(x),int(y)])
    return sorted(res,key=lambda x:x[0])

def decode_position(pos):
    return ";".join([" ".join(np.array(p).astype(str)) for p in pos])

def create_labels_for_scoring(df):
    # example: ['0 1', '3 4'] -> ['0 1; 3 4']
    df['location_for_create_labels'] = [ast.literal_eval(f'[]')] * len(df)
    for i in range(len(df)):
        lst = df.loc[i, 'location']
        if lst:
            new_lst = ';'.join(lst)
            df.loc[i, 'location_for_create_labels'] = ast.literal_eval(f'[["{new_lst}"]]')
    # create labels
    truths = []
    for location_list in df['location_for_create_labels'].values:
        truth = []
        if len(location_list) > 0:
            location = location_list[0]
            for loc in [s.split() for s in location.split(';')]:
                start, end = int(loc[0]), int(loc[1])
                truth.append([start, end])
        truths.append(truth)
    return truths


def get_char_probs(texts, predictions, tokenizer):
    results = [np.zeros(len(t)) for t in texts]
    for i, (text, prediction) in enumerate(zip(texts, predictions)):
        encoded = tokenizer(text, 
                            add_special_tokens=True,
                            return_offsets_mapping=True)
        for idx, (offset_mapping, pred) in enumerate(zip(encoded['offset_mapping'], prediction)):
            start = offset_mapping[0]
            end = offset_mapping[1]
            results[i][start:end] = pred
    return results


def get_results(char_probs, th=0.5):
    results = []
    for char_prob in char_probs:
        result = np.where(char_prob >= th)[0] + 1
        result = [list(g) for _, g in itertools.groupby(result, key=lambda n, c=itertools.count(): n - next(c))]
        result = [f"{min(r)} {max(r)}" for r in result]
        result = ";".join(result)
        results.append(result)
    return results


def get_predictions(results):
    predictions = []
    for result in results:
        prediction = []
        if result != "":
            for loc in [s.split() for s in result.split(';')]:
                start, end = int(loc[0]), int(loc[1])
                prediction.append([start, end])
        predictions.append(prediction)
    return predictions

def get_score(y_true, y_pred):
    score = span_micro_f1(y_true, y_pred)
    return score

def get_optimizer_params(model):
    param_optimizer = list(model.named_parameters())
    no_decay = ["bias", "LayerNorm.bias", "LayerNorm.weight"]
    optimizer_parameters = [
        {'params': [p for n, p in model.transformer.named_parameters() if not any(nd in n for nd in no_decay)],
         'lr': GCF.LR, 'weight_decay': GCF.WEIGHT_DECAY},
        {'params': [p for n, p in model.transformer.named_parameters() if any(nd in n for nd in no_decay)],
         'lr': GCF.LR, 'weight_decay': 0.0},
        {'params': [p for n, p in model.named_parameters() if "transformer" not in n],
         'lr': GCF.LR, 'weight_decay': 0.0}
    ]
    return optimizer_parameters

def postprocessing(predicts, pn_histories):
    new_p = []
    for pred, txt in zip(predicts, pn_histories):
        _p = []
        for pp in pred:
            h, t = pp[0], pp[1]
            if h == t:
                continue
            if txt[h-1] == ' ':
                _p.append([h, t])
                continue
            elif txt[h] in '\r\n':
                if txt[h+1] in '\r\n':
                    h = min(h + 2, t - 1)
                else:
                    h = min(h + 1, t - 1)
            else:
                h = max(0, h - 1)
            _p.append([h, t])
        new_p.append(_p)
    return new_p

# Copyright (c) Microsoft, Inc. 2020
#
# This source code is licensed under the MIT license found in the
# LICENSE file in the root directory of this source tree.
#
# Author: penhe@microsoft.com
# Date: 01/25/2021
#

import torch
import torch.nn.functional as F

__all__ = ['PerturbationLayer', 'AdversarialLearner', 'hook_sift_layer']

class PerturbationLayer(torch.nn.Module):
  def __init__(self, hidden_size, learning_rate=1e-4, init_perturbation=1e-2):
    super().__init__()
    self.learning_rate = learning_rate
    self.init_perturbation = init_perturbation
    self.delta = None
    self.LayerNorm = torch.nn.LayerNorm(hidden_size, 1e-7, elementwise_affine=False)
    self.adversarial_mode = False

  def adversarial_(self, adversarial = True):
    self.adversarial_mode = adversarial
    if not adversarial:
      self.delta = None

  def forward(self, input):
    if not self.adversarial_mode:
      self.input = self.LayerNorm(input)
      return self.input
    else:
      if self.delta is None:
        self.update_delta(requires_grad=True)
      return self.perturbated_input

  def update_delta(self, requires_grad = False):
    if not self.adversarial_mode:
      return True
    if self.delta is None:
      delta = torch.clamp(self.input.new(self.input.size()).normal_(0, self.init_perturbation).float(), -2*self.init_perturbation, 2*self.init_perturbation)
    else:
      grad = self.delta.grad
      self.delta.grad = None
      delta = self.delta
      norm = grad.norm()
      if torch.isnan(norm) or torch.isinf(norm):
        return False
      eps = self.learning_rate
      with torch.no_grad():
        delta = delta + eps*grad/(1e-6 + grad.abs().max(-1, keepdim=True)[0])
    self.delta = delta.float().detach().requires_grad_(requires_grad)
    self.perturbated_input = (self.input.to(delta).detach() + self.delta).to(self.input)
    return True

def hook_sift_layer(model, hidden_size, learning_rate=1e-4, init_perturbation=1e-2, target_module = 'embeddings.LayerNorm'):
  """
  Hook the sift perturbation layer to and existing model. With this method, you can apply adversarial training
  without changing the existing model implementation.
  Params:
    `model`: The model instance to apply adversarial training
    `hidden_size`: The dimmension size of the perturbated embedding
    `learning_rate`: The learning rate to update the perturbation
    `init_perturbation`: The initial range of perturbation
    `target_module`: The module to apply perturbation. It can be the name of the sub-module of the model or the sub-module instance.
    The perturbation layer will be inserted before the sub-module.
  Outputs:
    The perturbation layers.
  """
  
  if isinstance(target_module, str):
    _modules = [k for n,k in model.named_modules() if  target_module in n]
  else:
    assert isinstance(target_module, torch.nn.Module), f'{type(target_module)} is not an instance of torch.nn.Module'
    _modules = [target_module]
  adv_modules = []
  for m in _modules:
    adv = PerturbationLayer(hidden_size, learning_rate, init_perturbation)
    def adv_hook(module, inputs):
      return adv(inputs[0])
    for h in list(m._forward_pre_hooks.keys()):
      if m._forward_pre_hooks[h].__name__ == 'adv_hook':
        del m._forward_pre_hooks[h]
    m.register_forward_pre_hook(adv_hook)
    adv_modules.append(adv)
  return adv_modules

class AdversarialLearner:
  """ Adversarial Learner
  This class is the helper class for adversarial training.
  Params:
    `model`: The model instance to apply adversarial training
    `perturbation_modules`: The sub modules in the model that will generate perturbations. If it's `None`,
    the constructor will detect sub-modules of type `PerturbationLayer` in the model.
  Example usage:
  ```python
  # Create DeBERTa model
  adv_modules = hook_sift_layer(model, hidden_size=768)
  adv = AdversarialLearner(model, adv_modules)
  def logits_fn(model, *wargs, **kwargs):
    logits,_ = model(*wargs, **kwargs)
    return logits
  logits,loss = model(**data)
  loss = loss + adv.loss(logits, logits_fn, **data)
  # Other steps is the same as general training.
  ```
  """
  def __init__(self, model, adv_modules=None):
    if adv_modules is None:
      self.adv_modules = [m for m in model.modules() if isinstance(m, PerturbationLayer)]
    else:
      self.adv_modules = adv_modules
    self.parameters = [p for p in model.parameters()]
    self.model = model

  def loss(self, target, logits_fn, loss_fn = 'symmetric-kl', *wargs, **kwargs):
    """
    Calculate the adversarial loss based on the given logits fucntion and loss function.
    Inputs:
    `target`: the logits from original inputs.
    `logits_fn`: the function that produces logits based on perturbated inputs. E.g.,
    ```python
    def logits_fn(model, *wargs, **kwargs):
      logits = model(*wargs, **kwargs)
      return logits
    ```
    `loss_fn`: the function that caclulate the loss from perturbated logits and target logits.
      - If it's a string, it can be pre-built loss functions, i.e. kl, symmetric_kl, mse.
      - If it's a function, it will be called to calculate the loss, the signature of the function will be,
      ```python
      def loss_fn(source_logits, target_logits):
        # Calculate the loss
        return loss
      ```
    `*wargs`: the positional arguments that will be passed to the model
    `**kwargs`: the key-word arguments that will be passed to the model
    Outputs:
      The loss based on pertubated inputs.
    """
    self.prepare()
    if isinstance(loss_fn, str):
      loss_fn = perturbation_loss_fns[loss_fn]
    pert_logits = logits_fn(self.model, *wargs, **kwargs)
    pert_loss = loss_fn(pert_logits, target.detach()).sum()
    pert_loss.backward()
    for m in self.adv_modules:
      ok = m.update_delta(True)

    for r,p in zip(self.prev, self.parameters):
      p.requires_grad_(r)
    pert_logits = logits_fn(self.model, *wargs, **kwargs)
    pert_loss = symmetric_kl(pert_logits, target)

    self.cleanup()
    return pert_loss.mean()

  def prepare(self):
    self.prev = [p.requires_grad for p in self.parameters]
    for p in self.parameters:
      p.requires_grad_(False)
    for m in self.adv_modules:
      m.adversarial_(True)
  
  def cleanup(self):
    for r,p in zip(self.prev, self.parameters):
      p.requires_grad_(r)

    for m in self.adv_modules:
      m.adversarial_(False)

def symmetric_kl(logits, target):
  logit_stu = logits.view(-1, logits.size(-1)).float()
  logit_tea = target.view(-1, target.size(-1)).float()
  logprob_stu = F.log_softmax(logit_stu, -1)
  logprob_tea = F.log_softmax(logit_tea, -1)
  prob_tea = logprob_tea.exp().detach()
  prob_stu = logprob_stu.exp().detach()
  floss = ((prob_tea*(-logprob_stu)).sum(-1))    # Cross Entropy
  bloss = ((prob_stu*(-logprob_tea)).sum(-1))    # Cross Entropy
  loss = floss + bloss
  return loss

def kl(logits, target):
  logit_stu = logits.view(-1, logits.size(-1)).float()
  logit_tea = target.view(-1, target.size(-1)).float()
  logprob_stu = F.log_softmax(logit_stu, -1)
  logprob_tea = F.log_softmax(logit_tea.detach(), -1)
  prob_tea = logprob_tea.exp()
  loss = ((prob_tea*(-logprob_stu)).sum(-1))    # Cross Entropy
  return loss

def mse(logits, target):
  logit_stu = logits.view(-1, logits.size(-1)).float()
  logit_tea = target.view(-1, target.size(-1)).float()
  return F.mse_loss(logit_stu.view(-1),logit_tea.view(-1))

perturbation_loss_fns = {
    'symmetric-kl': symmetric_kl,
    'kl': kl,
    'mse': mse
    }

def logits_fn(model, *wargs, **kwargs):
  _, logits = model(*wargs, **kwargs)
  return logits

all_scores = []
oof = np.zeros(labels.shape)
for fold in range(GCF.N_FOLDS):
    #if fold in [0, 1, 2]:
    #    print(f'### skip Fold-{fold} ###')
    #    continue
    print(f'### start Fold-{fold} ###')
    set_seed()
    
    train_sequences = np.vstack([sequences[pn_num_folds != fold, :], pseudo_sequences])
    train_masks = np.vstack([masks[pn_num_folds != fold, :], pseudo_masks])
    train_type_ids = np.vstack([type_ids[pn_num_folds != fold, :], pseudo_type_ids])
    train_labels = np.vstack([labels[pn_num_folds != fold, :], pseudo_labels[:, :, fold]])

    valid_sequences = sequences[pn_num_folds == fold, :]
    valid_masks = masks[pn_num_folds == fold, :]
    valid_type_ids = type_ids[pn_num_folds == fold, :]
    valid_labels = labels[pn_num_folds == fold,:]
    
    train_dset = NBMEDataset(train_sequences, train_masks, train_type_ids, train_labels)
    valid_dset = NBMEDataset(valid_sequences, valid_masks, valid_type_ids, valid_labels)
    train_dloader = DataLoader(train_dset, batch_size=GCF.BS,
                               pin_memory=True, shuffle=True, drop_last=True, num_workers=os.cpu_count(),
                               worker_init_fn=lambda x: set_seed())
    valid_dloader = DataLoader(valid_dset, batch_size=GCF.BS,
                               pin_memory=True, shuffle=False, drop_last=False, num_workers=os.cpu_count())

    model = NBMEModel()
    model.to(device)

    adv_modules = hook_sift_layer(model, hidden_size=GCF.CONFIG.hidden_size)
    adv = AdversarialLearner(model, adv_modules)

    optimizer = AdamW(get_optimizer_params(model), lr=GCF.LR, weight_decay=GCF.WEIGHT_DECAY)
    max_train_steps = GCF.N_EPOCHS * len(train_dloader) // GCF.ACCUMULATE
    warmup_steps = int(max_train_steps * GCF.WARM_UP_RATIO)
    scheduler = get_cosine_schedule_with_warmup(
        optimizer,
        num_warmup_steps=warmup_steps,
        num_training_steps=max_train_steps
    )

    wandb.init(
        project="NBME",
        config={k: v for k, v in dict(vars(GCF)).items() if k[:2] != "__" and k not in GCF.NOT_WATCH_PARAM},
        entity='trtd56',
        name=f"{GCF.EXP_NAME}_f{fold}",
    )
    wandb.config.update({'fold': fold, 'exp_name': GCF.EXP_NAME})
    wandb.watch(model)

    if os.path.exists(f"{GCF.OUTPUT_DIR}/checkpoint.bin"):
        print('load prev model')
        checkpoint = torch.load(f"{GCF.OUTPUT_DIR}/checkpoint.bin") 
        model.load_state_dict(checkpoint["model"])
        optimizer.load_state_dict(checkpoint["optimizer"])
        scheduler.load_state_dict(checkpoint["scheduler"])
        random.setstate(checkpoint["random"])
        np.random.set_state(checkpoint["np_random"])
        torch.set_rng_state(checkpoint["torch"])
        torch.random.set_rng_state(checkpoint["torch_random"])
        torch.cuda.set_rng_state(checkpoint["cuda_random"])
        is_load = True
        best_score = 0
        del checkpoint
    else:
        is_load = False
        best_score = 0

    torch.cuda.empty_cache()
    gc.collect()
    
    train_losses, train_lrs, train_grads = [], [], []
    for epoch in range(GCF.N_EPOCHS):
        #if is_load and epoch < 3:
        #    print(f'skip epoch-{epoch}')
        #    continue
        _losses, _lrs, _grads = train_loop(model, train_dloader, optimizer, scheduler)
        valid_loss, valid_predicts = valid_loop(model, valid_dloader)
        
        valid_texts = train_df[train_df['fold'] == fold]['pn_history']
        valid_df = train_df[train_df['fold'] == fold].reset_index(drop=True)
        valid_df['location'] = valid_df['location'].apply(ast.literal_eval)
        valid_labels = create_labels_for_scoring(valid_df)
        char_probs = get_char_probs(valid_texts, valid_predicts, GCF.TOKENIZER)
        results = get_results(char_probs, th=0.5)
        preds = get_predictions(results)
        preds = postprocessing(preds, valid_df['pn_history'].tolist())
        f1score = get_score(valid_labels, preds)
        
        print(f"epoch-{epoch}: valid_loss={valid_loss}, valid_f1_score={f1score}")
        train_losses += _losses
        train_lrs += _lrs
        train_grads += _grads
        oof[pn_num_folds == fold, :] = valid_predicts
        if best_score < f1score:
            print('save best model')
            best_score = f1score
            if is_load:
                torch.save(model.state_dict(), f"{GCF.OUTPUT_DIR}/nbme_f{fold}_best_model_rerun.bin")
            else:
                torch.save(model.state_dict(), f"{GCF.OUTPUT_DIR}/nbme_f{fold}_best_model.bin")
                
        wandb.log({
                "train_loss": np.mean(_losses),
                "valid_loss": valid_loss,
                "valid_score": f1score,
                "valid_best_score": best_score,
                "learning_rate": np.mean(_lrs),
                "grad_norm": np.mean(_grads),
        })

        checkpoint = {
            "model": model.state_dict(),
            "optimizer": optimizer.state_dict(),
            "scheduler": scheduler.state_dict(),
            "random": random.getstate(),
            "np_random": np.random.get_state(),
            "torch": torch.get_rng_state(),
            "torch_random": torch.random.get_rng_state(),
            "cuda_random": torch.cuda.get_rng_state(),
        }
        torch.save(checkpoint, f"{GCF.OUTPUT_DIR}/checkpoint.bin")
            
    plt.plot(train_losses);plt.show()
    plt.plot(train_lrs);plt.show()
    plt.plot(train_grads);plt.show()

    os.remove(f"{GCF.OUTPUT_DIR}/checkpoint.bin")
    del checkpoint
    torch.cuda.empty_cache()
    gc.collect()
    wandb.finish()

for fold in range(GCF.N_FOLDS):
    print(fold)
    if oof[pn_num_folds == fold, :].sum() != 0:
        print('  -> skip')
        continue
    set_seed()
    
    valid_sequences = sequences[pn_num_folds == fold, :]
    valid_masks = masks[pn_num_folds == fold, :]
    valid_type_ids = type_ids[pn_num_folds == fold, :]
    valid_labels = labels[pn_num_folds == fold,:]
    
    valid_dset = NBMEDataset(valid_sequences, valid_masks, valid_type_ids, valid_labels)
    valid_dloader = DataLoader(valid_dset, batch_size=GCF.BS,
                               pin_memory=True, shuffle=False, drop_last=False, num_workers=os.cpu_count())
    
    model = NBMEModel()
    model.to(device)
    model.eval()

    if fold in [3]:
        model.load_state_dict(torch.load(f'{GCF.OUTPUT_DIR}/nbme_f{fold}_best_model_rerun.bin'))
    else:
        model.load_state_dict(torch.load(f'{GCF.OUTPUT_DIR}/nbme_f{fold}_best_model.bin'))
    
    valid_loss, valid_predicts = valid_loop(model, valid_dloader)
    oof[pn_num_folds == fold, :] = valid_predicts

    torch.cuda.empty_cache()
    gc.collect()

np.save(open(f"{GCF.OUTPUT_DIR}/oof.npy",'wb'), oof)

scores = []
for fold in range(GCF.N_FOLDS):
    print("Fold", fold)
    predictions = oof[train_df['fold'] == fold]
    valid_texts = train_df[train_df['fold'] == fold]['pn_history']
    valid_df = train_df[train_df['fold'] == fold].reset_index(drop=True)
    valid_df['location'] = valid_df['location'].apply(ast.literal_eval)

    valid_labels = create_labels_for_scoring(valid_df)
    char_probs = get_char_probs(valid_texts, predictions, GCF.TOKENIZER)
    results = get_results(char_probs, th=0.5)
    preds = get_predictions(results)

    preds = postprocessing(preds, valid_df['pn_history'].tolist())

    score = get_score(valid_labels, preds)
    scores.append(score)
    print(score)
    
print('CV', np.mean(scores))

